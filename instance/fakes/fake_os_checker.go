// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/bosh-backup-and-restore/instance"
	"github.com/cloudfoundry-incubator/bosh-backup-and-restore/ssh"
)

type FakeOSChecker struct {
	IsLinuxStub        func(instanceIdentifier instance.InstanceIdentifier, remoteRunner ssh.RemoteRunner) (bool, error)
	isLinuxMutex       sync.RWMutex
	isLinuxArgsForCall []struct {
		instanceIdentifier instance.InstanceIdentifier
		remoteRunner       ssh.RemoteRunner
	}
	isLinuxReturns struct {
		result1 bool
		result2 error
	}
	isLinuxReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOSChecker) IsLinux(instanceIdentifier instance.InstanceIdentifier, remoteRunner ssh.RemoteRunner) (bool, error) {
	fake.isLinuxMutex.Lock()
	ret, specificReturn := fake.isLinuxReturnsOnCall[len(fake.isLinuxArgsForCall)]
	fake.isLinuxArgsForCall = append(fake.isLinuxArgsForCall, struct {
		instanceIdentifier instance.InstanceIdentifier
		remoteRunner       ssh.RemoteRunner
	}{instanceIdentifier, remoteRunner})
	fake.recordInvocation("IsLinux", []interface{}{instanceIdentifier, remoteRunner})
	fake.isLinuxMutex.Unlock()
	if fake.IsLinuxStub != nil {
		return fake.IsLinuxStub(instanceIdentifier, remoteRunner)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.isLinuxReturns.result1, fake.isLinuxReturns.result2
}

func (fake *FakeOSChecker) IsLinuxCallCount() int {
	fake.isLinuxMutex.RLock()
	defer fake.isLinuxMutex.RUnlock()
	return len(fake.isLinuxArgsForCall)
}

func (fake *FakeOSChecker) IsLinuxArgsForCall(i int) (instance.InstanceIdentifier, ssh.RemoteRunner) {
	fake.isLinuxMutex.RLock()
	defer fake.isLinuxMutex.RUnlock()
	return fake.isLinuxArgsForCall[i].instanceIdentifier, fake.isLinuxArgsForCall[i].remoteRunner
}

func (fake *FakeOSChecker) IsLinuxReturns(result1 bool, result2 error) {
	fake.IsLinuxStub = nil
	fake.isLinuxReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeOSChecker) IsLinuxReturnsOnCall(i int, result1 bool, result2 error) {
	fake.IsLinuxStub = nil
	if fake.isLinuxReturnsOnCall == nil {
		fake.isLinuxReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isLinuxReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeOSChecker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isLinuxMutex.RLock()
	defer fake.isLinuxMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOSChecker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ instance.OSChecker = new(FakeOSChecker)

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/bosh-backup-and-restore/instance"
	"github.com/cloudfoundry-incubator/bosh-backup-and-restore/orchestrator"
	"github.com/cloudfoundry-incubator/bosh-backup-and-restore/ssh"
)

type FakeJobFinder struct {
	FindJobsStub        func(instanceIdentifier instance.InstanceIdentifier, connection ssh.SSHConnection, releaseMapping instance.ReleaseMapping) (orchestrator.Jobs, error)
	findJobsMutex       sync.RWMutex
	findJobsArgsForCall []struct {
		instanceIdentifier instance.InstanceIdentifier
		connection         ssh.SSHConnection
		releaseMapping     instance.ReleaseMapping
	}
	findJobsReturns struct {
		result1 orchestrator.Jobs
		result2 error
	}
	findJobsReturnsOnCall map[int]struct {
		result1 orchestrator.Jobs
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJobFinder) FindJobs(instanceIdentifier instance.InstanceIdentifier, connection ssh.SSHConnection, releaseMapping instance.ReleaseMapping) (orchestrator.Jobs, error) {
	fake.findJobsMutex.Lock()
	ret, specificReturn := fake.findJobsReturnsOnCall[len(fake.findJobsArgsForCall)]
	fake.findJobsArgsForCall = append(fake.findJobsArgsForCall, struct {
		instanceIdentifier instance.InstanceIdentifier
		connection         ssh.SSHConnection
		releaseMapping     instance.ReleaseMapping
	}{instanceIdentifier, connection, releaseMapping})
	fake.recordInvocation("FindJobs", []interface{}{instanceIdentifier, connection, releaseMapping})
	fake.findJobsMutex.Unlock()
	if fake.FindJobsStub != nil {
		return fake.FindJobsStub(instanceIdentifier, connection, releaseMapping)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findJobsReturns.result1, fake.findJobsReturns.result2
}

func (fake *FakeJobFinder) FindJobsCallCount() int {
	fake.findJobsMutex.RLock()
	defer fake.findJobsMutex.RUnlock()
	return len(fake.findJobsArgsForCall)
}

func (fake *FakeJobFinder) FindJobsArgsForCall(i int) (instance.InstanceIdentifier, ssh.SSHConnection, instance.ReleaseMapping) {
	fake.findJobsMutex.RLock()
	defer fake.findJobsMutex.RUnlock()
	return fake.findJobsArgsForCall[i].instanceIdentifier, fake.findJobsArgsForCall[i].connection, fake.findJobsArgsForCall[i].releaseMapping
}

func (fake *FakeJobFinder) FindJobsReturns(result1 orchestrator.Jobs, result2 error) {
	fake.FindJobsStub = nil
	fake.findJobsReturns = struct {
		result1 orchestrator.Jobs
		result2 error
	}{result1, result2}
}

func (fake *FakeJobFinder) FindJobsReturnsOnCall(i int, result1 orchestrator.Jobs, result2 error) {
	fake.FindJobsStub = nil
	if fake.findJobsReturnsOnCall == nil {
		fake.findJobsReturnsOnCall = make(map[int]struct {
			result1 orchestrator.Jobs
			result2 error
		})
	}
	fake.findJobsReturnsOnCall[i] = struct {
		result1 orchestrator.Jobs
		result2 error
	}{result1, result2}
}

func (fake *FakeJobFinder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findJobsMutex.RLock()
	defer fake.findJobsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeJobFinder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ instance.JobFinder = new(FakeJobFinder)
